{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started Getting Started What's the point of this? Why SheetShuttle? Before we jump in Code Dependencies Setting up API keys How does SheetShuttle work? Let's start coding Why is this code so messy? Time to write some tests How do I run this thing? Ok, but now what? SheetShuttle needs some fixes Write your own plugins What's the point of this? This guide should help you get started as a developer of SheetShuttle. Specifically, it will help you understand the purpose of the project, clarify some of the reasoning behind the design decisions, and much more. It's inevitable that some details will be missed here, so this should be a living document . Always feel free to update it as the implementation changes and when you have new ideas/questions/requests about the project. Why SheetShuttle? The purpose of SheetShuttle is to create infrastructure to automate: Retrieving data from Google Sheets Processing this data through user-defined plugins Publishing the processed data through different ways on GitHub You might say: \"This is very broad, I don't think much was explained here\", but that's exactly the point. SheetShuttle is simply the infrastructure that allows more specific problems to be solved. We want to allow the user to define their own approach to solving a problem, and use our infrastructure do implement it. With that in mind, SheetShuttle is meant to be plugin-friendly. This means that the user can write their own code and integrate it into SheetShuttle workflow. Before we jump in I know you're really excited to jump in and start coding but we gotta set up few things first. This is not the most fun part, but the good thing is that you'll only have to do it once! Code Dependencies SheetShuttle uses many dependencies that you're likely already familiar with. Tools like Python and poetry are used in many labs and practicals in the CS department and you likely already have some experience with them. If you don't already have these two installed, then you should start by doing that. I recommend installing Python through Pyenv or another equivalent since it makes switching to the right version easier. As for Poetry, you can find the instructions in the official website . It's also worth taking some time to review poetry commands and how they're used. Once you have both, Python and Poetry installed, make sure to run poetry install inside your repository home. This will install all needed dependencies on your Python virtualenv. Setting up API keys Setting up API keys is very important to be able to use SheetShuttle. If you're interested in using the GoogleSheets side, then you must set up a service account and have your authentication token and other information stored on your computer. This guide shows the needed steps to set up a service account. As for the GitHub side of things, you will need a personal access token store on your computer to be able to use the GitHub features of SheetShuttle. This online guide has the steps needed to do that. Make sure to keep all keys and tokens secure. DO NOT commit files containing keys, it will cause a security problem and invalidate your keys. Side note : If you're planning to create Google Sheets service account or get a GitHub access token, I recommend that you use a throwaway account. Do not use your personal Google or GitHub account to avoid any issues that could happen such as loss of personal data or other problems we can't anticipate. How does SheetShuttle work? There are three main components in SheetShuttle: Google Sheets handler, GitHub handler, and the user defined plugin. There are some requirements for the user defined plugin but it could include anything the user wants. As for the two handlers, they provide the API that the user defined plugin can use. Both handlers operate on the same concepts and they share the following: Require configuration file that is either user written or automatically generated Configuration file must follow the schema outlined in the infrastructure of each handler NOTE: The schema guide is a very important resource. You can find it here Each handler iterates through the configuration and makes a series of API requests to send out/retrieve the data specified in the configuration files Let's start coding Now that you know the concept behind SheetShuttle, you can start contributing to the project! Make sure you follow the code of conduct and the contribution guide while you write code and send it for review. Why is this code so messy? A lot of the code in SheetShuttle was written as proof of concept to see that we can implement something that links Google Sheets and GitHub. This means that there is plenty of room to polish it up, refactor, and make it more clear to read and understand. If you find some parts to be confusing, missing documentation, or outright disorganized, feel free to go in and make the necessary changes! Many linters are also included in the project to make sure that you're following industry standards of code hygiene and keeping things clean and tidy. Time to write some tests Testing is very important when you're adding new changes or making fixes to existing problems. We don't want to ship a broken product so we always want to make sure that SheetShuttle is working as expected. The existing test suite covers most of the code in the tool but there is room for improvement. Any changes to the infrastructure code should be accompanies with some testing to validate that things are running correctly. How do I run this thing? After you run poetry install , the command you need is poetry run sheetshuttle <your_arguments> . If you want to know more about the available arguments, you can run poetry run sheetshuttle -h to display the help message. Ok, but now what? SheetShuttle needs some fixes There are some existing open issues in the repository that need to be addressed. Some of them are major problems, and others are smaller ones. This is one of the main priorities to make sure that the infrastructure is bug-free before we start using it. Write your own plugins Once existing issues have been resolved, we can start adding new features in the form of plugins! These plugins can look very different depending on what you want them to do. However, they should probably live somewhere else and not with the infrastructure code. So please don't commit plugins directly to this repository since we're only planning to ship the infrastructure and everything else is an addon.","title":"Home"},{"location":"#getting-started","text":"Getting Started What's the point of this? Why SheetShuttle? Before we jump in Code Dependencies Setting up API keys How does SheetShuttle work? Let's start coding Why is this code so messy? Time to write some tests How do I run this thing? Ok, but now what? SheetShuttle needs some fixes Write your own plugins","title":"Getting Started"},{"location":"#whats-the-point-of-this","text":"This guide should help you get started as a developer of SheetShuttle. Specifically, it will help you understand the purpose of the project, clarify some of the reasoning behind the design decisions, and much more. It's inevitable that some details will be missed here, so this should be a living document . Always feel free to update it as the implementation changes and when you have new ideas/questions/requests about the project.","title":"What's the point of this?"},{"location":"#why-sheetshuttle","text":"The purpose of SheetShuttle is to create infrastructure to automate: Retrieving data from Google Sheets Processing this data through user-defined plugins Publishing the processed data through different ways on GitHub You might say: \"This is very broad, I don't think much was explained here\", but that's exactly the point. SheetShuttle is simply the infrastructure that allows more specific problems to be solved. We want to allow the user to define their own approach to solving a problem, and use our infrastructure do implement it. With that in mind, SheetShuttle is meant to be plugin-friendly. This means that the user can write their own code and integrate it into SheetShuttle workflow.","title":"Why SheetShuttle?"},{"location":"#before-we-jump-in","text":"I know you're really excited to jump in and start coding but we gotta set up few things first. This is not the most fun part, but the good thing is that you'll only have to do it once!","title":"Before we jump in"},{"location":"#code-dependencies","text":"SheetShuttle uses many dependencies that you're likely already familiar with. Tools like Python and poetry are used in many labs and practicals in the CS department and you likely already have some experience with them. If you don't already have these two installed, then you should start by doing that. I recommend installing Python through Pyenv or another equivalent since it makes switching to the right version easier. As for Poetry, you can find the instructions in the official website . It's also worth taking some time to review poetry commands and how they're used. Once you have both, Python and Poetry installed, make sure to run poetry install inside your repository home. This will install all needed dependencies on your Python virtualenv.","title":"Code Dependencies"},{"location":"#setting-up-api-keys","text":"Setting up API keys is very important to be able to use SheetShuttle. If you're interested in using the GoogleSheets side, then you must set up a service account and have your authentication token and other information stored on your computer. This guide shows the needed steps to set up a service account. As for the GitHub side of things, you will need a personal access token store on your computer to be able to use the GitHub features of SheetShuttle. This online guide has the steps needed to do that. Make sure to keep all keys and tokens secure. DO NOT commit files containing keys, it will cause a security problem and invalidate your keys. Side note : If you're planning to create Google Sheets service account or get a GitHub access token, I recommend that you use a throwaway account. Do not use your personal Google or GitHub account to avoid any issues that could happen such as loss of personal data or other problems we can't anticipate.","title":"Setting up API keys"},{"location":"#how-does-sheetshuttle-work","text":"There are three main components in SheetShuttle: Google Sheets handler, GitHub handler, and the user defined plugin. There are some requirements for the user defined plugin but it could include anything the user wants. As for the two handlers, they provide the API that the user defined plugin can use. Both handlers operate on the same concepts and they share the following: Require configuration file that is either user written or automatically generated Configuration file must follow the schema outlined in the infrastructure of each handler NOTE: The schema guide is a very important resource. You can find it here Each handler iterates through the configuration and makes a series of API requests to send out/retrieve the data specified in the configuration files","title":"How does SheetShuttle work?"},{"location":"#lets-start-coding","text":"Now that you know the concept behind SheetShuttle, you can start contributing to the project! Make sure you follow the code of conduct and the contribution guide while you write code and send it for review.","title":"Let's start coding"},{"location":"#why-is-this-code-so-messy","text":"A lot of the code in SheetShuttle was written as proof of concept to see that we can implement something that links Google Sheets and GitHub. This means that there is plenty of room to polish it up, refactor, and make it more clear to read and understand. If you find some parts to be confusing, missing documentation, or outright disorganized, feel free to go in and make the necessary changes! Many linters are also included in the project to make sure that you're following industry standards of code hygiene and keeping things clean and tidy.","title":"Why is this code so messy?"},{"location":"#time-to-write-some-tests","text":"Testing is very important when you're adding new changes or making fixes to existing problems. We don't want to ship a broken product so we always want to make sure that SheetShuttle is working as expected. The existing test suite covers most of the code in the tool but there is room for improvement. Any changes to the infrastructure code should be accompanies with some testing to validate that things are running correctly.","title":"Time to write some tests"},{"location":"#how-do-i-run-this-thing","text":"After you run poetry install , the command you need is poetry run sheetshuttle <your_arguments> . If you want to know more about the available arguments, you can run poetry run sheetshuttle -h to display the help message.","title":"How do I run this thing?"},{"location":"#ok-but-now-what","text":"","title":"Ok, but now what?"},{"location":"#sheetshuttle-needs-some-fixes","text":"There are some existing open issues in the repository that need to be addressed. Some of them are major problems, and others are smaller ones. This is one of the main priorities to make sure that the infrastructure is bug-free before we start using it.","title":"SheetShuttle needs some fixes"},{"location":"#write-your-own-plugins","text":"Once existing issues have been resolved, we can start adding new features in the form of plugins! These plugins can look very different depending on what you want them to do. However, they should probably live somewhere else and not with the infrastructure code. So please don't commit plugins directly to this repository since we're only planning to ship the infrastructure and everything else is an addon.","title":"Write your own plugins"},{"location":"Getting_Started/","text":"Getting Started Getting Started What's the point of this? Why SheetShuttle? Before we jump in Code Dependencies Setting up API keys How does SheetShuttle work? Let's start coding Why is this code so messy? Time to write some tests How do I run this thing? Ok, but now what? SheetShuttle needs some fixes Write your own plugins What's the point of this? This guide should help you get started as a developer of SheetShuttle. Specifically, it will help you understand the purpose of the project, clarify some of the reasoning behind the design decisions, and much more. It's inevitable that some details will be missed here, so this should be a living document . Always feel free to update it as the implementation changes and when you have new ideas/questions/requests about the project. Why SheetShuttle? The purpose of SheetShuttle is to create infrastructure to automate: Retrieving data from Google Sheets Processing this data through user-defined plugins Publishing the processed data through different ways on GitHub You might say: \"This is very broad, I don't think much was explained here\", but that's exactly the point. SheetShuttle is simply the infrastructure that allows more specific problems to be solved. We want to allow the user to define their own approach to solving a problem, and use our infrastructure do implement it. With that in mind, SheetShuttle is meant to be plugin-friendly. This means that the user can write their own code and integrate it into SheetShuttle workflow. Before we jump in I know you're really excited to jump in and start coding but we gotta set up few things first. This is not the most fun part, but the good thing is that you'll only have to do it once! Code Dependencies SheetShuttle uses many dependencies that you're likely already familiar with. Tools like Python and poetry are used in many labs and practicals in the CS department and you likely already have some experience with them. If you don't already have these two installed, then you should start by doing that. I recommend installing Python through Pyenv or another equivalent since it makes switching to the right version easier. As for Poetry, you can find the instructions in the official website . It's also worth taking some time to review poetry commands and how they're used. Once you have both, Python and Poetry installed, make sure to run poetry install inside your repository home. This will install all needed dependencies on your Python virtualenv. Setting up API keys Setting up API keys is very important to be able to use SheetShuttle. If you're interested in using the GoogleSheets side, then you must set up a service account and have your authentication token and other information stored on your computer. This guide shows the needed steps to set up a service account. As for the GitHub side of things, you will need a personal access token store on your computer to be able to use the GitHub features of SheetShuttle. This online guide has the steps needed to do that. Make sure to keep all keys and tokens secure. DO NOT commit files containing keys, it will cause a security problem and invalidate your keys. Side note : If you're planning to create Google Sheets service account or get a GitHub access token, I recommend that you use a throwaway account. Do not use your personal Google or GitHub account to avoid any issues that could happen such as loss of personal data or other problems we can't anticipate. How does SheetShuttle work? There are three main components in SheetShuttle: Google Sheets handler, GitHub handler, and the user defined plugin. There are some requirements for the user defined plugin but it could include anything the user wants. As for the two handlers, they provide the API that the user defined plugin can use. Both handlers operate on the same concepts and they share the following: Require configuration file that is either user written or automatically generated Configuration file must follow the schema outlined in the infrastructure of each handler NOTE: The schema guide is a very important resource. You can find it here Each handler iterates through the configuration and makes a series of API requests to send out/retrieve the data specified in the configuration files Let's start coding Now that you know the concept behind SheetShuttle, you can start contributing to the project! Make sure you follow the code of conduct and the contribution guide while you write code and send it for review. Why is this code so messy? A lot of the code in SheetShuttle was written as proof of concept to see that we can implement something that links Google Sheets and GitHub. This means that there is plenty of room to polish it up, refactor, and make it more clear to read and understand. If you find some parts to be confusing, missing documentation, or outright disorganized, feel free to go in and make the necessary changes! Many linters are also included in the project to make sure that you're following industry standards of code hygiene and keeping things clean and tidy. Time to write some tests Testing is very important when you're adding new changes or making fixes to existing problems. We don't want to ship a broken product so we always want to make sure that SheetShuttle is working as expected. The existing test suite covers most of the code in the tool but there is room for improvement. Any changes to the infrastructure code should be accompanies with some testing to validate that things are running correctly. How do I run this thing? After you run poetry install , the command you need is poetry run sheetshuttle <your_arguments> . If you want to know more about the available arguments, you can run poetry run sheetshuttle -h to display the help message. Ok, but now what? SheetShuttle needs some fixes There are some existing open issues in the repository that need to be addressed. Some of them are major problems, and others are smaller ones. This is one of the main priorities to make sure that the infrastructure is bug-free before we start using it. Write your own plugins Once existing issues have been resolved, we can start adding new features in the form of plugins! These plugins can look very different depending on what you want them to do. However, they should probably live somewhere else and not with the infrastructure code. So please don't commit plugins directly to this repository since we're only planning to ship the infrastructure and everything else is an addon.","title":"Getting_Started"},{"location":"Getting_Started/#getting-started","text":"Getting Started What's the point of this? Why SheetShuttle? Before we jump in Code Dependencies Setting up API keys How does SheetShuttle work? Let's start coding Why is this code so messy? Time to write some tests How do I run this thing? Ok, but now what? SheetShuttle needs some fixes Write your own plugins","title":"Getting Started"},{"location":"Getting_Started/#whats-the-point-of-this","text":"This guide should help you get started as a developer of SheetShuttle. Specifically, it will help you understand the purpose of the project, clarify some of the reasoning behind the design decisions, and much more. It's inevitable that some details will be missed here, so this should be a living document . Always feel free to update it as the implementation changes and when you have new ideas/questions/requests about the project.","title":"What's the point of this?"},{"location":"Getting_Started/#why-sheetshuttle","text":"The purpose of SheetShuttle is to create infrastructure to automate: Retrieving data from Google Sheets Processing this data through user-defined plugins Publishing the processed data through different ways on GitHub You might say: \"This is very broad, I don't think much was explained here\", but that's exactly the point. SheetShuttle is simply the infrastructure that allows more specific problems to be solved. We want to allow the user to define their own approach to solving a problem, and use our infrastructure do implement it. With that in mind, SheetShuttle is meant to be plugin-friendly. This means that the user can write their own code and integrate it into SheetShuttle workflow.","title":"Why SheetShuttle?"},{"location":"Getting_Started/#before-we-jump-in","text":"I know you're really excited to jump in and start coding but we gotta set up few things first. This is not the most fun part, but the good thing is that you'll only have to do it once!","title":"Before we jump in"},{"location":"Getting_Started/#code-dependencies","text":"SheetShuttle uses many dependencies that you're likely already familiar with. Tools like Python and poetry are used in many labs and practicals in the CS department and you likely already have some experience with them. If you don't already have these two installed, then you should start by doing that. I recommend installing Python through Pyenv or another equivalent since it makes switching to the right version easier. As for Poetry, you can find the instructions in the official website . It's also worth taking some time to review poetry commands and how they're used. Once you have both, Python and Poetry installed, make sure to run poetry install inside your repository home. This will install all needed dependencies on your Python virtualenv.","title":"Code Dependencies"},{"location":"Getting_Started/#setting-up-api-keys","text":"Setting up API keys is very important to be able to use SheetShuttle. If you're interested in using the GoogleSheets side, then you must set up a service account and have your authentication token and other information stored on your computer. This guide shows the needed steps to set up a service account. As for the GitHub side of things, you will need a personal access token store on your computer to be able to use the GitHub features of SheetShuttle. This online guide has the steps needed to do that. Make sure to keep all keys and tokens secure. DO NOT commit files containing keys, it will cause a security problem and invalidate your keys. Side note : If you're planning to create Google Sheets service account or get a GitHub access token, I recommend that you use a throwaway account. Do not use your personal Google or GitHub account to avoid any issues that could happen such as loss of personal data or other problems we can't anticipate.","title":"Setting up API keys"},{"location":"Getting_Started/#how-does-sheetshuttle-work","text":"There are three main components in SheetShuttle: Google Sheets handler, GitHub handler, and the user defined plugin. There are some requirements for the user defined plugin but it could include anything the user wants. As for the two handlers, they provide the API that the user defined plugin can use. Both handlers operate on the same concepts and they share the following: Require configuration file that is either user written or automatically generated Configuration file must follow the schema outlined in the infrastructure of each handler NOTE: The schema guide is a very important resource. You can find it here Each handler iterates through the configuration and makes a series of API requests to send out/retrieve the data specified in the configuration files","title":"How does SheetShuttle work?"},{"location":"Getting_Started/#lets-start-coding","text":"Now that you know the concept behind SheetShuttle, you can start contributing to the project! Make sure you follow the code of conduct and the contribution guide while you write code and send it for review.","title":"Let's start coding"},{"location":"Getting_Started/#why-is-this-code-so-messy","text":"A lot of the code in SheetShuttle was written as proof of concept to see that we can implement something that links Google Sheets and GitHub. This means that there is plenty of room to polish it up, refactor, and make it more clear to read and understand. If you find some parts to be confusing, missing documentation, or outright disorganized, feel free to go in and make the necessary changes! Many linters are also included in the project to make sure that you're following industry standards of code hygiene and keeping things clean and tidy.","title":"Why is this code so messy?"},{"location":"Getting_Started/#time-to-write-some-tests","text":"Testing is very important when you're adding new changes or making fixes to existing problems. We don't want to ship a broken product so we always want to make sure that SheetShuttle is working as expected. The existing test suite covers most of the code in the tool but there is room for improvement. Any changes to the infrastructure code should be accompanies with some testing to validate that things are running correctly.","title":"Time to write some tests"},{"location":"Getting_Started/#how-do-i-run-this-thing","text":"After you run poetry install , the command you need is poetry run sheetshuttle <your_arguments> . If you want to know more about the available arguments, you can run poetry run sheetshuttle -h to display the help message.","title":"How do I run this thing?"},{"location":"Getting_Started/#ok-but-now-what","text":"","title":"Ok, but now what?"},{"location":"Getting_Started/#sheetshuttle-needs-some-fixes","text":"There are some existing open issues in the repository that need to be addressed. Some of them are major problems, and others are smaller ones. This is one of the main priorities to make sure that the infrastructure is bug-free before we start using it.","title":"SheetShuttle needs some fixes"},{"location":"Getting_Started/#write-your-own-plugins","text":"Once existing issues have been resolved, we can start adding new features in the form of plugins! These plugins can look very different depending on what you want them to do. However, they should probably live somewhere else and not with the infrastructure code. So please don't commit plugins directly to this repository since we're only planning to ship the infrastructure and everything else is an addon.","title":"Write your own plugins"},{"location":"Google_API_Setup/","text":"Google API Setup Creating a Service Account Create a Google API project from cloud console Click on select project, or create new project Enable Google Sheets API from the API Menu Create credentials for service accounts with the needed access from the Sheets Overview page click on create credentials Fill the information as shown here Select your service account name This information can be left blank Click on the newly created service account and navigate to the keys tab Click on Add Key and select Create new key Select JSON and click create, a json file will be downloaded in your downloads folder Sharing a File with the Service Account Once a service account has been created, individual Google Sheet files should be shared with the account in order to retrieve data from the sheets. To do that, the share functionality of Google Sheets can be used where the service account email address should be given edit access to the file. Please note that you should use the service account email setup when creating the service account","title":"Google_API_Setup"},{"location":"Google_API_Setup/#google-api-setup","text":"","title":"Google API Setup"},{"location":"Google_API_Setup/#creating-a-service-account","text":"Create a Google API project from cloud console Click on select project, or create new project Enable Google Sheets API from the API Menu Create credentials for service accounts with the needed access from the Sheets Overview page click on create credentials Fill the information as shown here Select your service account name This information can be left blank Click on the newly created service account and navigate to the keys tab Click on Add Key and select Create new key Select JSON and click create, a json file will be downloaded in your downloads folder","title":"Creating a Service Account"},{"location":"Google_API_Setup/#sharing-a-file-with-the-service-account","text":"Once a service account has been created, individual Google Sheet files should be shared with the account in order to retrieve data from the sheets. To do that, the share functionality of Google Sheets can be used where the service account email address should be given edit access to the file. Please note that you should use the service account email setup when creating the service account","title":"Sharing a File with the Service Account"},{"location":"Schemas/","text":"Config Schemas The examples shown here demonstrate the schemas for configuration read by SheetShuttle. In order for the tool to function with no errors, user written configuration must follow the specified format. Config Schemas Sheets Schema Defining Objects Region Object contains_headers Explained fill Explained types Explained Examples Sheet Object Overall Structure GitHub Interactions Schema Issue Schema Pull Request Schema File Schema Sheets Schema Sheets schema describe the format for configuration used to retrieve Google Sheet data. Defining Objects There are two main nested object structures used in the Sheets schema. Region Object This is the simplest object that does not contain complex nested objects in it. It has the following general structure: name: <string, required> name of the region to create start: <string, required> cell to start from (eg. A1) end: <string, required> cell to end at (eg. H12) contains_headers: <boolean, required> if selected range contains headers in the first row headers: <list of strings, conditional> headers to be used, only required if contains_headers is false fill: <boolean, optional> fill the region with `None` if there are missing values. Defaults to false types: <string or object, optional> data type to use for the whole region or for specific columns. Defaults to `string` Some values in this structure are a bit ambiguous, the following section will provide further explanation on their usage: contains_headers Explained In many cases, the region being retrieved already contains the headers to the data. Set this option to true in order to set the column headers of the resulting Pandas dataframe equal to the first row of the data. In the case that the data does not contain headers, another value headers is required by the schema. It should be a list of strings with the headers of the data. NOTE: The length of the headers list must match the number of columns in the data. Otherwise a Pandas error will be thrown. fill Explained SheetShuttle attempts to deal with missing data, but many limitations exist. The following screenshot shows a dataset with empty cells. Let's see how SheetShuttle allows you to deal with it. When retrieved from the Google Sheets API, the data looks as follows: [ ['Student Name', 'EE1-1', 'EE1-2', 'EE1-3'], ['name1', '85', '0'], ['name2', '100', '1'], ['name3', '100', '1'], ['name4', '100', '0'], ['name5', '100', '1'], ['name6', '100', '1'] ] As seen in the sample output, the missing data simply does not show up in the returned value from the API. By enabling fill , the data is converted to the following and then a dataframe is created using it. [ ['Student Name', 'EE1-1', 'EE1-2', 'EE1-3'], ['name1', '85', '0', None], ['name2', '100', '1', None], ['name3', '100', '1', None], ['name4', '100', '0', None], ['name5', '100', '1', None], ['name6', '100', '1', None] ] The same applies to empty rows, where a row full of None is appended in some cases. Example: [ ['Student Name', 'EE1-1', 'EE1-2', 'EE1-3'], ['name1', '85', '0', None], ['name2', '100', '1', None], ['name3', '100', '1', None], ['name4', '100', '0', None], ['name5', '100', '1', None], ['name6', '100', '1', None], [None, None, None, None] ] None will then get converted to Not a Number NaN values in the resulting Pandas dataframe. A problem with this approach is the following: Using a similar example where the missing data is not in the last row/column as seen here: The resulting data from the API is the following: [ ['Student Name', 'EE1-1', 'EE1-2', 'EE1-3'], ['name1', '85', '', '0'], ['name2', '100', '', '1'], ['name3', '100', '', '0'], ['name4', '100', '', '1'], ['name5', '100', '', '0'], ['name6', '100', '', '0'] ] In this case, the '' will not be replace by None and will stay the same even when fill is enabled. IMPORTANT NOTE: If working with numerical data with possibly some missing fields, you MUST use the float type. This is because int cannot be converted to NaN by Pandas while float can. types Explained By default, all data retrieved from Google Sheets is string. However, in the case that a user would like to work with a variety of data types, they can use this option to set the data type of the pandas dataframe. The available data types are: object string int float bool datetime types can be set to any of the items on that list. Additionally, the user can determine data types for individual columns by doing the following: types: col1: int col2: string col3: bool Where the keys are the names of the columns in the data and the value is the data type of that specific column. Note: using a name of a column that does not exist will throw an error Examples With the possible structures in mind, here are a couple of examples of how a region object can look like: Example 1: name: grades start: A1 end: L4 contains_headers: true Example 2: name: expenses start: F5 end: K12 contains_headers: false headers: - Jan - Feb - Mar - Apr - May - Jun fill: true name: expenses start: A1 end: D6 contains_headers: true types: day: string date: datetime expense: float paid: bool Sheet Object The sheet object is one level above the region structure and it looks as follow: name: <string, required> name of sheet to read from in Google Sheets regions: <list of region object, required> Regions to create from the sheet Example: name: sheet1 regions: - name: grades start: A1 end: L4 contains_headers: true - name: expenses start: F5 end: K12 contains_headers: false headers: - Jan - Feb - Mar - Apr - May - Jun Overall Structure The outermost keys of the configuration must contain only two keys as follows: source_id: <string, required> ID of sheet to read sheets: <list of sheet objects, required> Example: source_id: my_sheet_id sheets: - name: sheet1 regions: - name: grades start: A1 end: L4 contains_headers: true - name: expenses start: F5 end: K12 contains_headers: false headers: - Jan - Feb - Mar - Apr - May - Jun - name: sheet2 regions: - name: some_data start: A1 end: Z10 contains_headers: true JSON Schema Structure: This is the structure used to validate the configuration using jsonschema : { \"type\": \"object\", \"properties\": { \"source_id\": {\"type\": \"string\"}, \"sheets\": { \"type\": \"array\", \"items\": {\"$ref\": \"#/$defs/sheet\"}, \"minItems\": 1, }, }, \"required\": [\"source_id\", \"sheets\"], \"$defs\": { \"region\": { \"type\": \"object\", \"properties\": { \"name\": {\"type\": \"string\"}, \"start\": {\"type\": \"string\"}, \"end\": {\"type\": \"string\"}, \"contains_headers\": {\"type\": \"boolean\"}, \"headers\": { \"type\": \"array\", \"items\": {\"type\": \"string\"}, \"minItems\": 1, }, \"fill\": {\"type\": \"boolean\"}, \"types\": { \"anyOf\": [ { \"type\": \"string\", \"enum\": [ \"object\", \"string\", \"int\", \"float\", \"bool\", \"datetime\", ], }, { \"type\": \"object\", \"additionalProperties\": { \"type\": \"string\", \"enum\": [ \"object\", \"string\", \"int\", \"float\", \"bool\", \"datetime\", ], }, }, ] }, }, \"required\": [\"name\", \"start\", \"end\", \"contains_headers\"], \"if\": {\"properties\": {\"contains_headers\": {\"const\": false}}}, \"then\": { \"required\": [\"headers\"], }, }, \"sheet\": { \"type\": \"object\", \"properties\": { \"name\": {\"type\": \"string\"}, \"regions\": { \"type\": \"array\", \"items\": {\"$ref\": \"#/$defs/region\"}, \"minItems\": 1, }, }, \"required\": [\"name\", \"regions\"], }, }, } GitHub Interactions Schema This type of schema describes the structure of configurations used to post entries to Github such as issues, pull requests, and files. Issue Schema Issue schemas follow a simple one-level structure. The following example shows the structure: type: <str, required> type of Entry, must equal \"issue\" (case sensitive) action: <str, required> action to be executed (\"create\" -> create a new issue, OR \"update\" -> add a comment to existing issue) repo: <str, required> name of repo to create the issue in. Formatted as <org>/<repo_name> body: <str, required> body of the issue or comment labels: <List[str], optional> list of labels to add to the issue # Conditional properties title: <str, conditional> title of the new issue, required if action is \"new\" number: <int, conditional> number of the existing issue, required if action is \"update\" Here are some examples of configuration to create and update issues on GitHub: Example 1: Create a new issue type: issue action: create repo: example_org/example_user title: some new issue body: example body labels: - SheetShuttle - Automated Example 2: Update issue #12 with a new comment and labels type: issue action: update repo: example_org/example_user number: 12 body: example body labels: - SheetShuttle - Automated JSON Schema Structure: { \"type\": \"object\", \"properties\": { \"type\": {\"type\": \"string\", \"const\": \"issue\"}, \"action\": {\"type\": \"string\", \"enum\": [\"create\", \"update\"]}, \"repo\": {\"type\": \"string\", \"pattern\": r\"^.+[^\\s]\\/[^\\s].+$\"}, \"body\": {\"type\": \"string\", \"minLength\": 1}, }, \"required\": [\"type\", \"action\", \"repo\", \"body\"], \"if\": {\"properties\": {\"action\": {\"const\": \"create\"}}}, \"then\": { \"properties\": { \"title\": {\"type\": \"string\", \"minLength\": 1}, \"labels\": { \"type\": \"array\", \"items\": {\"type\": \"string\", \"minLength\": 1}, \"minItems\": 1, }, }, \"required\": [\"title\"], }, \"else\": { \"properties\": { \"number\": {\"type\": \"integer\"}, \"labels\": { \"type\": \"array\", \"items\": {\"type\": \"string\", \"minLength\": 1}, \"minItems\": 1, }, }, \"required\": [\"number\"], }, } Pull Request Schema This schema structure is responsible for creating pull requests and updating them with comments. It's very similar to the Issue schema with few exceptions. type: <str, required> type of Entry, must equal \"pull request\" (case sensitive) action: <str, required> action to be executed (\"create\" -> create a new PR, OR \"update\" -> add a comment to existing PR) repo: <str, required> name of repo to create the issue in. Formatted as <org>/<repo_name> body: <str, required> body of the pull request or comment # Conditional properties if action is \"create\" title: <str, conditional> title of the new issue, required if action is \"new\" base: <str,conditional> name of the branch to merge into, required if action is \"new\" head: <str,conditional> name of the branch to merge from, required if action is \"new\" # Conditional properties if action is \"update\" number: <int, conditional> number of the existing pull request, required if action is \"update\" Here are some examples of configuration to create and update issues on GitHub: Example 1: Create a new pull request type: pull request action: create repo: example_org/example_user title: some new pull request body: example body base: main head: my_branch Example 2: Update pull request #5 with a new comment type: pull request action: update repo: example_org/example_user number: 12 body: example body JSON Schema Structure: { \"type\": \"object\", \"properties\": { \"type\": {\"type\": \"string\", \"const\": \"pull request\"}, \"action\": {\"type\": \"string\", \"enum\": [\"create\", \"update\"]}, \"repo\": {\"type\": \"string\", \"pattern\": r\"^.+[^\\s]\\/[^\\s].+$\"}, \"body\": {\"type\": \"string\", \"minLength\": 1}, }, \"required\": [\"type\", \"action\", \"repo\", \"body\"], \"if\": {\"properties\": {\"action\": {\"const\": \"create\"}}}, \"then\": { \"properties\": { \"title\": {\"type\": \"string\", \"minLength\": 1}, \"base\": {\"type\": \"string\", \"minLength\": 1}, \"head\": {\"type\": \"string\", \"minLength\": 1}, }, \"required\": [\"title\", \"base\", \"head\"], }, \"else\": { \"properties\": { \"number\": {\"type\": \"integer\"}, }, \"required\": [\"number\"], }, } File Schema This schema structure is responsible for creating files and updating them as well as replacing them entirely. Unlike the issue and pull request schemas, this one supports 3 actions create , update , and replace . While update preserves the ordinal content of the file, replace erases the old content. type: <str, required> type of Entry, must equal \"file\" (case sensitive) action: <str, required> action to be executed (\"create\" OR \"update\" OR \"replace\") repo: <str, required> name of repo to create the issue in. Formatted as <org>/<repo_name> path: <str, required> path to the file to be impacted content: <str, required> content of the file branch: <str, required> name of the branch that the file exists in commit_message: <str, optional> the commit message to used when executing the action Here are some examples of configuration to create, update, and replace files: Example 1: Create a new markdown file type: file action: create repo: example_org/example_user path: folder/file.md content: \"# Hello world!\" branch: main commit_message: add example markdown file Example 2: Update an existing markdown file type: file action: update repo: example_org/example_user path: folder/file.md content: this is an example branch: main commit_message: update example markdown file Example 3: Replace an existing markdown file type: file action: replace repo: example_org/example_user path: folder/file.md content: \"# Section 1\" branch: main commit_message: replace example markdown file JSON Schema Structure: { \"type\": \"object\", \"properties\": { \"type\": {\"type\": \"string\", \"const\": \"file\"}, \"action\": {\"type\": \"string\", \"enum\": [\"create\", \"update\", \"replace\"]}, \"repo\": {\"type\": \"string\", \"pattern\": r\"^.+[^\\s]\\/[^\\s].+$\"}, \"path\": {\"type\": \"string\", \"minLength\": 1}, \"content\": {\"type\": \"string\", \"minLength\": 1}, \"branch\": {\"type\": \"string\", \"minLength\": 1}, \"commit_message\": {\"type\": \"string\", \"minLength\": 1}, }, \"required\": [\"type\", \"action\", \"repo\", \"path\", \"content\", \"branch\"], }","title":"Schemas"},{"location":"Schemas/#config-schemas","text":"The examples shown here demonstrate the schemas for configuration read by SheetShuttle. In order for the tool to function with no errors, user written configuration must follow the specified format. Config Schemas Sheets Schema Defining Objects Region Object contains_headers Explained fill Explained types Explained Examples Sheet Object Overall Structure GitHub Interactions Schema Issue Schema Pull Request Schema File Schema","title":"Config Schemas"},{"location":"Schemas/#sheets-schema","text":"Sheets schema describe the format for configuration used to retrieve Google Sheet data.","title":"Sheets Schema"},{"location":"Schemas/#defining-objects","text":"There are two main nested object structures used in the Sheets schema.","title":"Defining Objects"},{"location":"Schemas/#region-object","text":"This is the simplest object that does not contain complex nested objects in it. It has the following general structure: name: <string, required> name of the region to create start: <string, required> cell to start from (eg. A1) end: <string, required> cell to end at (eg. H12) contains_headers: <boolean, required> if selected range contains headers in the first row headers: <list of strings, conditional> headers to be used, only required if contains_headers is false fill: <boolean, optional> fill the region with `None` if there are missing values. Defaults to false types: <string or object, optional> data type to use for the whole region or for specific columns. Defaults to `string` Some values in this structure are a bit ambiguous, the following section will provide further explanation on their usage:","title":"Region Object"},{"location":"Schemas/#contains_headers-explained","text":"In many cases, the region being retrieved already contains the headers to the data. Set this option to true in order to set the column headers of the resulting Pandas dataframe equal to the first row of the data. In the case that the data does not contain headers, another value headers is required by the schema. It should be a list of strings with the headers of the data. NOTE: The length of the headers list must match the number of columns in the data. Otherwise a Pandas error will be thrown.","title":"contains_headers Explained"},{"location":"Schemas/#fill-explained","text":"SheetShuttle attempts to deal with missing data, but many limitations exist. The following screenshot shows a dataset with empty cells. Let's see how SheetShuttle allows you to deal with it. When retrieved from the Google Sheets API, the data looks as follows: [ ['Student Name', 'EE1-1', 'EE1-2', 'EE1-3'], ['name1', '85', '0'], ['name2', '100', '1'], ['name3', '100', '1'], ['name4', '100', '0'], ['name5', '100', '1'], ['name6', '100', '1'] ] As seen in the sample output, the missing data simply does not show up in the returned value from the API. By enabling fill , the data is converted to the following and then a dataframe is created using it. [ ['Student Name', 'EE1-1', 'EE1-2', 'EE1-3'], ['name1', '85', '0', None], ['name2', '100', '1', None], ['name3', '100', '1', None], ['name4', '100', '0', None], ['name5', '100', '1', None], ['name6', '100', '1', None] ] The same applies to empty rows, where a row full of None is appended in some cases. Example: [ ['Student Name', 'EE1-1', 'EE1-2', 'EE1-3'], ['name1', '85', '0', None], ['name2', '100', '1', None], ['name3', '100', '1', None], ['name4', '100', '0', None], ['name5', '100', '1', None], ['name6', '100', '1', None], [None, None, None, None] ] None will then get converted to Not a Number NaN values in the resulting Pandas dataframe. A problem with this approach is the following: Using a similar example where the missing data is not in the last row/column as seen here: The resulting data from the API is the following: [ ['Student Name', 'EE1-1', 'EE1-2', 'EE1-3'], ['name1', '85', '', '0'], ['name2', '100', '', '1'], ['name3', '100', '', '0'], ['name4', '100', '', '1'], ['name5', '100', '', '0'], ['name6', '100', '', '0'] ] In this case, the '' will not be replace by None and will stay the same even when fill is enabled. IMPORTANT NOTE: If working with numerical data with possibly some missing fields, you MUST use the float type. This is because int cannot be converted to NaN by Pandas while float can.","title":"fill Explained"},{"location":"Schemas/#types-explained","text":"By default, all data retrieved from Google Sheets is string. However, in the case that a user would like to work with a variety of data types, they can use this option to set the data type of the pandas dataframe. The available data types are: object string int float bool datetime types can be set to any of the items on that list. Additionally, the user can determine data types for individual columns by doing the following: types: col1: int col2: string col3: bool Where the keys are the names of the columns in the data and the value is the data type of that specific column. Note: using a name of a column that does not exist will throw an error","title":"types Explained"},{"location":"Schemas/#examples","text":"With the possible structures in mind, here are a couple of examples of how a region object can look like: Example 1: name: grades start: A1 end: L4 contains_headers: true Example 2: name: expenses start: F5 end: K12 contains_headers: false headers: - Jan - Feb - Mar - Apr - May - Jun fill: true name: expenses start: A1 end: D6 contains_headers: true types: day: string date: datetime expense: float paid: bool","title":"Examples"},{"location":"Schemas/#sheet-object","text":"The sheet object is one level above the region structure and it looks as follow: name: <string, required> name of sheet to read from in Google Sheets regions: <list of region object, required> Regions to create from the sheet Example: name: sheet1 regions: - name: grades start: A1 end: L4 contains_headers: true - name: expenses start: F5 end: K12 contains_headers: false headers: - Jan - Feb - Mar - Apr - May - Jun","title":"Sheet Object"},{"location":"Schemas/#overall-structure","text":"The outermost keys of the configuration must contain only two keys as follows: source_id: <string, required> ID of sheet to read sheets: <list of sheet objects, required> Example: source_id: my_sheet_id sheets: - name: sheet1 regions: - name: grades start: A1 end: L4 contains_headers: true - name: expenses start: F5 end: K12 contains_headers: false headers: - Jan - Feb - Mar - Apr - May - Jun - name: sheet2 regions: - name: some_data start: A1 end: Z10 contains_headers: true JSON Schema Structure: This is the structure used to validate the configuration using jsonschema : { \"type\": \"object\", \"properties\": { \"source_id\": {\"type\": \"string\"}, \"sheets\": { \"type\": \"array\", \"items\": {\"$ref\": \"#/$defs/sheet\"}, \"minItems\": 1, }, }, \"required\": [\"source_id\", \"sheets\"], \"$defs\": { \"region\": { \"type\": \"object\", \"properties\": { \"name\": {\"type\": \"string\"}, \"start\": {\"type\": \"string\"}, \"end\": {\"type\": \"string\"}, \"contains_headers\": {\"type\": \"boolean\"}, \"headers\": { \"type\": \"array\", \"items\": {\"type\": \"string\"}, \"minItems\": 1, }, \"fill\": {\"type\": \"boolean\"}, \"types\": { \"anyOf\": [ { \"type\": \"string\", \"enum\": [ \"object\", \"string\", \"int\", \"float\", \"bool\", \"datetime\", ], }, { \"type\": \"object\", \"additionalProperties\": { \"type\": \"string\", \"enum\": [ \"object\", \"string\", \"int\", \"float\", \"bool\", \"datetime\", ], }, }, ] }, }, \"required\": [\"name\", \"start\", \"end\", \"contains_headers\"], \"if\": {\"properties\": {\"contains_headers\": {\"const\": false}}}, \"then\": { \"required\": [\"headers\"], }, }, \"sheet\": { \"type\": \"object\", \"properties\": { \"name\": {\"type\": \"string\"}, \"regions\": { \"type\": \"array\", \"items\": {\"$ref\": \"#/$defs/region\"}, \"minItems\": 1, }, }, \"required\": [\"name\", \"regions\"], }, }, }","title":"Overall Structure"},{"location":"Schemas/#github-interactions-schema","text":"This type of schema describes the structure of configurations used to post entries to Github such as issues, pull requests, and files.","title":"GitHub Interactions Schema"},{"location":"Schemas/#issue-schema","text":"Issue schemas follow a simple one-level structure. The following example shows the structure: type: <str, required> type of Entry, must equal \"issue\" (case sensitive) action: <str, required> action to be executed (\"create\" -> create a new issue, OR \"update\" -> add a comment to existing issue) repo: <str, required> name of repo to create the issue in. Formatted as <org>/<repo_name> body: <str, required> body of the issue or comment labels: <List[str], optional> list of labels to add to the issue # Conditional properties title: <str, conditional> title of the new issue, required if action is \"new\" number: <int, conditional> number of the existing issue, required if action is \"update\" Here are some examples of configuration to create and update issues on GitHub: Example 1: Create a new issue type: issue action: create repo: example_org/example_user title: some new issue body: example body labels: - SheetShuttle - Automated Example 2: Update issue #12 with a new comment and labels type: issue action: update repo: example_org/example_user number: 12 body: example body labels: - SheetShuttle - Automated JSON Schema Structure: { \"type\": \"object\", \"properties\": { \"type\": {\"type\": \"string\", \"const\": \"issue\"}, \"action\": {\"type\": \"string\", \"enum\": [\"create\", \"update\"]}, \"repo\": {\"type\": \"string\", \"pattern\": r\"^.+[^\\s]\\/[^\\s].+$\"}, \"body\": {\"type\": \"string\", \"minLength\": 1}, }, \"required\": [\"type\", \"action\", \"repo\", \"body\"], \"if\": {\"properties\": {\"action\": {\"const\": \"create\"}}}, \"then\": { \"properties\": { \"title\": {\"type\": \"string\", \"minLength\": 1}, \"labels\": { \"type\": \"array\", \"items\": {\"type\": \"string\", \"minLength\": 1}, \"minItems\": 1, }, }, \"required\": [\"title\"], }, \"else\": { \"properties\": { \"number\": {\"type\": \"integer\"}, \"labels\": { \"type\": \"array\", \"items\": {\"type\": \"string\", \"minLength\": 1}, \"minItems\": 1, }, }, \"required\": [\"number\"], }, }","title":"Issue Schema"},{"location":"Schemas/#pull-request-schema","text":"This schema structure is responsible for creating pull requests and updating them with comments. It's very similar to the Issue schema with few exceptions. type: <str, required> type of Entry, must equal \"pull request\" (case sensitive) action: <str, required> action to be executed (\"create\" -> create a new PR, OR \"update\" -> add a comment to existing PR) repo: <str, required> name of repo to create the issue in. Formatted as <org>/<repo_name> body: <str, required> body of the pull request or comment # Conditional properties if action is \"create\" title: <str, conditional> title of the new issue, required if action is \"new\" base: <str,conditional> name of the branch to merge into, required if action is \"new\" head: <str,conditional> name of the branch to merge from, required if action is \"new\" # Conditional properties if action is \"update\" number: <int, conditional> number of the existing pull request, required if action is \"update\" Here are some examples of configuration to create and update issues on GitHub: Example 1: Create a new pull request type: pull request action: create repo: example_org/example_user title: some new pull request body: example body base: main head: my_branch Example 2: Update pull request #5 with a new comment type: pull request action: update repo: example_org/example_user number: 12 body: example body JSON Schema Structure: { \"type\": \"object\", \"properties\": { \"type\": {\"type\": \"string\", \"const\": \"pull request\"}, \"action\": {\"type\": \"string\", \"enum\": [\"create\", \"update\"]}, \"repo\": {\"type\": \"string\", \"pattern\": r\"^.+[^\\s]\\/[^\\s].+$\"}, \"body\": {\"type\": \"string\", \"minLength\": 1}, }, \"required\": [\"type\", \"action\", \"repo\", \"body\"], \"if\": {\"properties\": {\"action\": {\"const\": \"create\"}}}, \"then\": { \"properties\": { \"title\": {\"type\": \"string\", \"minLength\": 1}, \"base\": {\"type\": \"string\", \"minLength\": 1}, \"head\": {\"type\": \"string\", \"minLength\": 1}, }, \"required\": [\"title\", \"base\", \"head\"], }, \"else\": { \"properties\": { \"number\": {\"type\": \"integer\"}, }, \"required\": [\"number\"], }, }","title":"Pull Request Schema"},{"location":"Schemas/#file-schema","text":"This schema structure is responsible for creating files and updating them as well as replacing them entirely. Unlike the issue and pull request schemas, this one supports 3 actions create , update , and replace . While update preserves the ordinal content of the file, replace erases the old content. type: <str, required> type of Entry, must equal \"file\" (case sensitive) action: <str, required> action to be executed (\"create\" OR \"update\" OR \"replace\") repo: <str, required> name of repo to create the issue in. Formatted as <org>/<repo_name> path: <str, required> path to the file to be impacted content: <str, required> content of the file branch: <str, required> name of the branch that the file exists in commit_message: <str, optional> the commit message to used when executing the action Here are some examples of configuration to create, update, and replace files: Example 1: Create a new markdown file type: file action: create repo: example_org/example_user path: folder/file.md content: \"# Hello world!\" branch: main commit_message: add example markdown file Example 2: Update an existing markdown file type: file action: update repo: example_org/example_user path: folder/file.md content: this is an example branch: main commit_message: update example markdown file Example 3: Replace an existing markdown file type: file action: replace repo: example_org/example_user path: folder/file.md content: \"# Section 1\" branch: main commit_message: replace example markdown file JSON Schema Structure: { \"type\": \"object\", \"properties\": { \"type\": {\"type\": \"string\", \"const\": \"file\"}, \"action\": {\"type\": \"string\", \"enum\": [\"create\", \"update\", \"replace\"]}, \"repo\": {\"type\": \"string\", \"pattern\": r\"^.+[^\\s]\\/[^\\s].+$\"}, \"path\": {\"type\": \"string\", \"minLength\": 1}, \"content\": {\"type\": \"string\", \"minLength\": 1}, \"branch\": {\"type\": \"string\", \"minLength\": 1}, \"commit_message\": {\"type\": \"string\", \"minLength\": 1}, }, \"required\": [\"type\", \"action\", \"repo\", \"path\", \"content\", \"branch\"], }","title":"File Schema"}]}